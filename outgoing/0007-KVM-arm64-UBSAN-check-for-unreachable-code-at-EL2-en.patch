From 654422e9671a805da37441ee4dec6d1d28f620ac Mon Sep 17 00:00:00 2001
From: George Popescu <georgepope@google.com>
Date: Tue, 11 Aug 2020 08:46:14 +0000
Subject: [PATCH 07/12] KVM: arm64: UBSAN check for unreachable code at EL2
 enabled

The data from __ubsan_handle_builtin_unreachable is passed to the buffer
and printed at EL1 by its similar handler.

Signed-off-by: George Popescu <georgepope@google.com>
---
 arch/arm64/include/asm/kvm_ubsan.h  | 21 ++++++++++++---------
 arch/arm64/kvm/hyp/nvhe/kvm_ubsan.c | 14 ++++++++++++--
 arch/arm64/kvm/kvm_ubsan_buffer.c   |  5 ++++-
 3 files changed, 28 insertions(+), 12 deletions(-)

diff --git a/arch/arm64/include/asm/kvm_ubsan.h b/arch/arm64/include/asm/kvm_ubsan.h
index 0a1703eee184..df5377c0b56c 100644
--- a/arch/arm64/include/asm/kvm_ubsan.h
+++ b/arch/arm64/include/asm/kvm_ubsan.h
@@ -17,15 +17,18 @@ struct ubsan_values {
 };
 
 struct kvm_ubsan_info {
-	enum {
-		UBSAN_OUT_OF_BOUNDS,
-	} type;
-	union {
-		struct out_of_bounds_data out_of_bounds_data;
-	};
-	union {
-		struct ubsan_values u_val;
-	};
+    enum {
+	UBSAN_OUT_OF_BOUNDS,
+	UBSAN_UNREACHABLE_DATA
+    } type;
+    union {
+        struct out_of_bounds_data out_of_bounds_data;
+        struct unreachable_data unreachable_data;
+    };
+    union {
+        struct ubsan_values u_val;
+    };
 };
 
 void __ubsan_handle_out_of_bounds(void *_data, void *index);
+void __ubsan_handle_builtin_unreachable(void *_data);
diff --git a/arch/arm64/kvm/hyp/nvhe/kvm_ubsan.c b/arch/arm64/kvm/hyp/nvhe/kvm_ubsan.c
index 2cfdb069a987..f392597ff8f8 100644
--- a/arch/arm64/kvm/hyp/nvhe/kvm_ubsan.c
+++ b/arch/arm64/kvm/hyp/nvhe/kvm_ubsan.c
@@ -32,7 +32,7 @@ static inline struct kvm_ubsan_info *kvm_ubsan_buffer_next_slot(void)
 
 void __ubsan_handle_add_overflow(void *_data, void *lhs, void *rhs) {}
 
-void __ubsan_handle_sub_overflow(void *_data, void *lhs, void *rhs){}
+void __ubsan_handle_sub_overflow(void *_data, void *lhs, void *rhs) {}
 
 void __ubsan_handle_mul_overflow(void *_data, void *lhs, void *rhs) {}
 
@@ -60,6 +60,16 @@ void __ubsan_handle_out_of_bounds(void *_data, void *index)
 
 void __ubsan_handle_shift_out_of_bounds(void *_data, void *lhs, void *rhs) {}
 
-void __ubsan_handle_builtin_unreachable(void *_data) {}
+void __ubsan_handle_builtin_unreachable(void *_data)
+{
+	struct kvm_ubsan_info *slot;
+	struct unreachable_data *data = _data;
+
+	slot = kvm_ubsan_buffer_next_slot();
+	if (slot) {
+		slot->type = UBSAN_UNREACHABLE_DATA;
+		slot->unreachable_data = *data;
+	}
+}
 
 void __ubsan_handle_load_invalid_value(void *_data, void *val) {}
diff --git a/arch/arm64/kvm/kvm_ubsan_buffer.c b/arch/arm64/kvm/kvm_ubsan_buffer.c
index 251cf275f1af..d0f18f5b9cf3 100644
--- a/arch/arm64/kvm/kvm_ubsan_buffer.c
+++ b/arch/arm64/kvm/kvm_ubsan_buffer.c
@@ -25,7 +25,10 @@ void __kvm_check_ubsan_data(struct kvm_ubsan_info *slot)
 		__ubsan_handle_out_of_bounds(&slot->out_of_bounds_data,
 				slot->u_val.lval);
 		break;
-	}
+	case UBSAN_UNREACHABLE_DATA:
+		__ubsan_handle_builtin_unreachable(&slot->unreachable_data);
+		break;
+    	}
 }
 
 void iterate_kvm_ubsan_buffer(int left, int right, unsigned long *nr_slots) {
-- 
2.28.0.220.ged08abb693-goog

